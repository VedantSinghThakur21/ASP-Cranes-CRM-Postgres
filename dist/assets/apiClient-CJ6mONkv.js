const i="http://localhost:3001/api";const h=()=>{try{return localStorage.getItem("jwt-token")||localStorage.getItem("authToken")||sessionStorage.getItem("jwt-token")||sessionStorage.getItem("authToken")}catch(s){return console.error("Error accessing storage for auth token:",s),null}};async function a(s,r={}){const o=s.startsWith("http")?s:`${i}${s.startsWith("/")?s:`/${s}`}`,u=h(),l={"Content-Type":"application/json",...u?{Authorization:`Bearer ${u}`}:{},...r.headers};if(console.log(`ðŸ”¹ API Request: ${r.method||"GET"} ${o}`),r.body)try{console.log("Request Body:",typeof r.body=="string"?JSON.parse(r.body):r.body)}catch{console.log("Request Body: [Unable to parse]",r.body)}try{const e=await fetch(o,{...r,headers:l});console.log(`ðŸ”¸ API Response: ${e.status} ${e.statusText} for ${o}`),console.log("Response Headers:",{"content-type":e.headers.get("content-type"),"content-length":e.headers.get("content-length")});const g=e.clone();if(!e.ok)try{const n=e.headers.get("content-type");if(n&&n.includes("application/json")){const t=await e.json();return console.error("API Error Response (JSON):",t),{success:!1,error:{message:t.error||t.message||"API request failed",code:t.code||String(e.status),status:e.status,details:t.details||t}}}else{const t=await e.text();return console.error("API Error Response (Text):",t.substring(0,500)+(t.length>500?"...":"")),{success:!1,error:{message:t||"API request failed with non-JSON response",code:String(e.status),status:e.status}}}}catch(n){return console.error("Error parsing error response:",n),{success:!1,error:{message:`API request failed: ${e.status} ${e.statusText}`,code:String(e.status),status:e.status}}}try{if(e.status===204)return{success:!0};const n=e.headers.get("content-type");if(n&&n.includes("application/json")){const t=await e.json();return console.log("API Success Response:",t),{success:!0,data:t}}else{const t=await e.text();return console.log("API Success Response (Text):",t.substring(0,500)+(t.length>500?"...":"")),{success:!0,data:t}}}catch(n){console.error("Error parsing success response:",n);try{const t=await g.text();console.error("Raw response text:",t.substring(0,500)+(t.length>500?"...":""))}catch(t){console.error("Could not get raw response text:",t)}return{success:!1,error:{message:"Failed to parse API response",code:"PARSE_ERROR"}}}}catch(e){return console.error(`API Fetch Error for ${o}:`,e),{success:!1,error:{message:e instanceof Error?e.message:"Unknown API error",code:"CLIENT_ERROR"}}}}const c={get:(s,r={})=>a(s,{...r,method:"GET"}),post:(s,r,o={})=>a(s,{...o,method:"POST",body:JSON.stringify(r)}),put:(s,r,o={})=>a(s,{...o,method:"PUT",body:JSON.stringify(r)}),patch:(s,r,o={})=>a(s,{...o,method:"PATCH",body:JSON.stringify(r)}),delete:(s,r={})=>a(s,{...r,method:"DELETE"})},d={login:(s,r)=>c.post("/auth/login",{email:s,password:r}),verifyToken:s=>c.post("/auth/verify-token",{token:s}),logout:()=>c.post("/auth/logout",{})};export{c as api,d as authApi,c as default};

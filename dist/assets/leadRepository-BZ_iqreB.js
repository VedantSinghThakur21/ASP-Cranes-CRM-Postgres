import{q as c,g as u}from"./index-B3DxmTIK.js";const _=async()=>{try{console.log("Getting all leads directly from PostgreSQL database");const a=(await c(`
      SELECT l.*, 
             COALESCE(c.name, l.customer_name, 'Unknown Customer') as customer_name,
             COALESCE(c.company_name, l.company_name, '') as company_name,
             COALESCE(c.email, l.email) as email,
             COALESCE(c.phone, l.phone) as phone,
             COALESCE(c.address, '') as customer_address,
             COALESCE(c.designation, l.designation, '') as designation,
             u.display_name as assigned_to_name
      FROM leads l
      LEFT JOIN customers c ON l.customer_id = c.id
      LEFT JOIN users u ON l.assigned_to = u.uid
      ORDER BY l.created_at DESC
    `)).rows.map(s=>({id:s.id,customerId:s.customer_id,customerName:s.customer_name,companyName:s.company_name,email:s.email,phone:s.phone,customerAddress:s.customer_address,serviceNeeded:s.service_needed,siteLocation:s.site_location,startDate:s.start_date,rentalDays:s.rental_days,shiftTiming:s.shift_timing,status:s.status,source:s.source,assignedTo:s.assigned_to||"",assignedToName:s.assigned_to_name||"",designation:s.designation,createdAt:s.created_at,updatedAt:s.updated_at,files:s.files?JSON.parse(s.files):null,notes:s.notes}));return console.log(`Successfully retrieved ${a.length} leads from database`),console.log("🧪 Debug: First few leads customer names:",a.slice(0,3).map(s=>({id:s.id,customerName:s.customerName,companyName:s.companyName}))),a}catch(e){throw console.error("Error fetching leads from database:",e),e}},p=async e=>{const a=await u();try{await a.query("BEGIN"),console.log("Creating lead in PostgreSQL database:",{customerName:e.customerName,email:e.email,companyName:e.companyName});const s=await l(e,a);let t=null;e.assignedTo&&e.assignedTo.trim()!==""&&((await a.query("SELECT uid FROM users WHERE uid = $1",[e.assignedTo])).rows.length>0?(t=e.assignedTo,console.log(`✅ Valid assignedTo user found: ${e.assignedTo}`)):(console.warn(`⚠️ Invalid assignedTo user ID: ${e.assignedTo}, setting to null`),t=null));const n=(await a.query(`
      INSERT INTO leads (
        customer_id, customer_name, company_name, email, phone,
        service_needed, site_location, start_date, rental_days,
        shift_timing, status, source, assigned_to, designation,
        notes, files
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
      RETURNING *
    `,[s.customerId,s.customerName,s.companyName,e.email,e.phone,e.serviceNeeded,e.siteLocation,e.startDate,e.rentalDays,e.shiftTiming,e.status,e.source,t,e.designation,e.notes,e.files?JSON.stringify(e.files):null])).rows[0];let o="";if(n.assigned_to){const r=await a.query("SELECT display_name FROM users WHERE uid = $1",[n.assigned_to]);r.rows.length>0&&(o=r.rows[0].display_name)}await a.query("COMMIT");const i={id:n.id,customerId:n.customer_id,customerName:n.customer_name,companyName:n.company_name,email:n.email,phone:n.phone,serviceNeeded:n.service_needed,siteLocation:n.site_location,startDate:n.start_date,rentalDays:n.rental_days,shiftTiming:n.shift_timing,status:n.status,source:n.source,assignedTo:n.assigned_to||"",assignedToName:o,designation:n.designation,createdAt:n.created_at,updatedAt:n.updated_at,files:n.files?JSON.parse(n.files):null,notes:n.notes};return console.log("Lead created successfully:",i.id),i}catch(s){throw await a.query("ROLLBACK"),console.error("Error creating lead:",s),s}finally{a.release()}},y=async(e,a)=>{try{if(!e)throw new Error("Invalid lead ID provided");console.log(`Updating lead ${e} status to ${a} in database`);const s=await c("UPDATE leads SET status = $1 WHERE id = $2 RETURNING *",[a,e]);if(s.rows.length===0)return console.warn(`Lead ${e} not found when updating status to ${a}`),null;const t=s.rows[0];let m="";if(t.assigned_to){const o=await c("SELECT display_name FROM users WHERE uid = $1",[t.assigned_to]);o.rows.length>0&&(m=o.rows[0].display_name)}const n={id:t.id,customerId:t.customer_id,customerName:t.customer_name,companyName:t.company_name,email:t.email,phone:t.phone,serviceNeeded:t.service_needed,siteLocation:t.site_location,startDate:t.start_date,rentalDays:t.rental_days,shiftTiming:t.shift_timing,status:t.status,source:t.source,assignedTo:t.assigned_to||"",assignedToName:m,designation:t.designation,createdAt:t.created_at,updatedAt:t.updated_at,files:t.files?JSON.parse(t.files):null,notes:t.notes};return console.log(`Lead ${e} status updated successfully to ${a}`),n}catch(s){throw console.error(`Error updating lead ${e} status to ${a}:`,s),s}},E=async e=>{try{if(!e)throw new Error("Invalid lead ID provided");console.log(`Getting lead ${e} from database`);const a=await c(`
      SELECT l.*, c.name as customer_name, c.company_name, u.display_name as assigned_to_name  
      FROM leads l
      LEFT JOIN customers c ON l.customer_id = c.id
      LEFT JOIN users u ON l.assigned_to = u.uid
      WHERE l.id = $1
    `,[e]);if(a.rows.length===0)return console.log(`Lead ${e} not found in database`),null;const s=a.rows[0],t={id:s.id,customerId:s.customer_id,customerName:s.customer_name,companyName:s.company_name,email:s.email,phone:s.phone,serviceNeeded:s.service_needed,siteLocation:s.site_location,startDate:s.start_date,rentalDays:s.rental_days,shiftTiming:s.shift_timing,status:s.status,source:s.source,assignedTo:s.assigned_to||"",assignedToName:s.assigned_to_name||"",designation:s.designation,createdAt:s.created_at,updatedAt:s.updated_at,files:s.files?JSON.parse(s.files):null,notes:s.notes};return console.log(`Lead ${e} retrieved successfully`),t}catch(a){throw console.error(`Error fetching lead ${e}:`,a),a}},N=async e=>{try{if(!e)throw new Error("Invalid lead ID provided");console.log(`Deleting lead ${e} from database`);const s=(await c("DELETE FROM leads WHERE id = $1 RETURNING id",[e])).rows.length>0;return s?console.log(`Lead ${e} deleted successfully`):console.warn(`Lead ${e} not found for deletion`),s}catch(a){throw console.error(`Error deleting lead ${e}:`,a),a}},l=async(e,a)=>{try{console.log("🔍 Finding or creating customer for lead:",{email:e.email,customerName:e.customerName,companyName:e.companyName});const s=await a.query("SELECT id, name, company_name, contact_name FROM customers WHERE email = $1",[e.email]);if(s.rows.length>0){const i=s.rows[0];return console.log(`✅ Found existing customer ${i.id} (${i.name}) for email ${e.email}`),{customerId:i.id,customerName:i.name,companyName:i.company_name}}if(e.customerName&&e.companyName){const i=await a.query("SELECT id, name, company_name FROM customers WHERE name ILIKE $1 AND company_name ILIKE $2",[`%${e.customerName}%`,`%${e.companyName}%`]);if(i.rows.length>0){const r=i.rows[0];return console.log(`✅ Found existing customer ${r.id} by name+company match`),await a.query("UPDATE customers SET email = $1, updated_at = NOW() WHERE id = $2 AND (email IS NULL OR email = '')",[e.email,r.id]),{customerId:r.id,customerName:r.name,companyName:r.company_name}}}console.log(`🆕 Creating new customer for email ${e.email}`);const t=e.customerName||"Unknown Customer",m=e.companyName||t,o=(await a.query(`
      INSERT INTO customers (
        name, company_name, contact_name, email, phone, address, 
        type, designation, notes
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING id, name, company_name
    `,[t,m,t,e.email,e.phone||"",e.siteLocation||"","other",e.designation||"",`Auto-created from lead on ${new Date().toISOString()}`])).rows[0];return console.log(`🎉 Created new customer ${o.id} (${o.name}) for lead`),{customerId:o.id,customerName:o.name,companyName:o.company_name}}catch(s){return console.error("❌ Error finding/creating customer for lead:",s),console.log("🔄 Falling back to lead data without customer linking"),{customerId:null,customerName:e.customerName||"Unknown Customer",companyName:e.companyName||""}}},f=async(e,a,s)=>{try{if(!e)throw new Error("Invalid lead ID provided");let t=null;a&&a.trim()!==""&&((await c("SELECT uid FROM users WHERE uid = $1",[a])).rows.length>0?(t=a,console.log(`✅ Valid assignedTo user found: ${a}`)):(console.warn(`⚠️ Invalid assignedTo user ID: ${a}, setting to null`),t=null)),console.log(`${t===null?"Unassigning":"Assigning"} lead ${e} ${t===null?"":`to ${s}`}`);const n=await c("UPDATE leads SET assigned_to = $1 WHERE id = $2 RETURNING *",[t,e]);if(n.rows.length===0)return console.warn(`Lead ${e} not found when updating assignment`),null;const o=n.rows[0];let i="";if(o.assigned_to){const d=await c("SELECT display_name FROM users WHERE uid = $1",[o.assigned_to]);d.rows.length>0&&(i=d.rows[0].display_name)}const r={id:o.id,customerId:o.customer_id,customerName:o.customer_name,companyName:o.company_name,email:o.email,phone:o.phone,serviceNeeded:o.service_needed,siteLocation:o.site_location,startDate:o.start_date,rentalDays:o.rental_days,shiftTiming:o.shift_timing,status:o.status,source:o.source,assignedTo:o.assigned_to||"",assignedToName:i||s,designation:o.designation,createdAt:o.created_at,updatedAt:o.updated_at,files:o.files?JSON.parse(o.files):null,notes:o.notes};return console.log(`Lead ${e} assignment updated successfully`),r}catch(t){throw console.error(`Error updating lead ${e} assignment:`,t),t}};export{p as createLead,N as deleteLead,l as findOrCreateCustomerForLead,E as getLeadById,_ as getLeads,f as updateLeadAssignment,y as updateLeadStatus};

import{q as c,g as d}from"./dbConnection-DFMSfmeB.js";import"./index-DVJ1rf7s.js";const _=async()=>{try{console.log("Getting all leads directly from PostgreSQL database");const t=(await c(`
      SELECT l.*, 
             COALESCE(c.name, l.customer_name, 'Unknown Customer') as customer_name,
             COALESCE(c.company_name, l.company_name, '') as company_name,
             COALESCE(c.email, l.email) as email,
             COALESCE(c.phone, l.phone) as phone,
             COALESCE(c.address, '') as customer_address,
             COALESCE(c.designation, l.designation, '') as designation,
             u.display_name as assigned_to_name
      FROM leads l
      LEFT JOIN customers c ON l.customer_id = c.id
      LEFT JOIN users u ON l.assigned_to = u.uid
      ORDER BY l.created_at DESC
    `)).rows.map(e=>({id:e.id,customerId:e.customer_id,customerName:e.customer_name,companyName:e.company_name,email:e.email,phone:e.phone,customerAddress:e.customer_address,serviceNeeded:e.service_needed,siteLocation:e.site_location,startDate:e.start_date,rentalDays:e.rental_days,shiftTiming:e.shift_timing,status:e.status,source:e.source,assignedTo:e.assigned_to||"",assignedToName:e.assigned_to_name||"",designation:e.designation,createdAt:e.created_at,updatedAt:e.updated_at,files:e.files?JSON.parse(e.files):null,notes:e.notes}));return console.log(`Successfully retrieved ${t.length} leads from database`),console.log("üß™ Debug: First few leads customer names:",t.slice(0,3).map(e=>({id:e.id,customerName:e.customerName,companyName:e.companyName}))),t}catch(s){throw console.error("Error fetching leads from database:",s),s}},p=async s=>{const t=await d();try{await t.query("BEGIN"),console.log("Creating lead in PostgreSQL database:",{customerName:s.customerName,email:s.email,companyName:s.companyName});const e=await u(s,t),o=(await t.query(`
      INSERT INTO leads (
        customer_id, customer_name, company_name, email, phone,
        service_needed, site_location, start_date, rental_days,
        shift_timing, status, source, assigned_to, designation,
        notes, files
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
      RETURNING *
    `,[e.customerId,e.customerName,e.companyName,s.email,s.phone,s.serviceNeeded,s.siteLocation,s.startDate,s.rentalDays,s.shiftTiming,s.status,s.source,s.assignedTo,s.designation,s.notes,s.files?JSON.stringify(s.files):null])).rows[0];let i="";if(o.assigned_to){const r=await t.query("SELECT display_name FROM users WHERE uid = $1",[o.assigned_to]);r.rows.length>0&&(i=r.rows[0].display_name)}await t.query("COMMIT");const n={id:o.id,customerId:o.customer_id,customerName:o.customer_name,companyName:o.company_name,email:o.email,phone:o.phone,serviceNeeded:o.service_needed,siteLocation:o.site_location,startDate:o.start_date,rentalDays:o.rental_days,shiftTiming:o.shift_timing,status:o.status,source:o.source,assignedTo:o.assigned_to||"",assignedToName:i,designation:o.designation,createdAt:o.created_at,updatedAt:o.updated_at,files:o.files?JSON.parse(o.files):null,notes:o.notes};return console.log("Lead created successfully:",n.id),n}catch(e){throw await t.query("ROLLBACK"),console.error("Error creating lead:",e),e}finally{t.release()}},y=async(s,t)=>{try{if(!s)throw new Error("Invalid lead ID provided");console.log(`Updating lead ${s} status to ${t} in database`);const e=await c("UPDATE leads SET status = $1 WHERE id = $2 RETURNING *",[t,s]);if(e.rows.length===0)return console.warn(`Lead ${s} not found when updating status to ${t}`),null;const a=e.rows[0];let o="";if(a.assigned_to){const n=await c("SELECT display_name FROM users WHERE uid = $1",[a.assigned_to]);n.rows.length>0&&(o=n.rows[0].display_name)}const i={id:a.id,customerId:a.customer_id,customerName:a.customer_name,companyName:a.company_name,email:a.email,phone:a.phone,serviceNeeded:a.service_needed,siteLocation:a.site_location,startDate:a.start_date,rentalDays:a.rental_days,shiftTiming:a.shift_timing,status:a.status,source:a.source,assignedTo:a.assigned_to||"",assignedToName:o,designation:a.designation,createdAt:a.created_at,updatedAt:a.updated_at,files:a.files?JSON.parse(a.files):null,notes:a.notes};return console.log(`Lead ${s} status updated successfully to ${t}`),i}catch(e){throw console.error(`Error updating lead ${s} status to ${t}:`,e),e}},N=async s=>{try{if(!s)throw new Error("Invalid lead ID provided");console.log(`Getting lead ${s} from database`);const t=await c(`
      SELECT l.*, c.name as customer_name, c.company_name, u.display_name as assigned_to_name  
      FROM leads l
      LEFT JOIN customers c ON l.customer_id = c.id
      LEFT JOIN users u ON l.assigned_to = u.uid
      WHERE l.id = $1
    `,[s]);if(t.rows.length===0)return console.log(`Lead ${s} not found in database`),null;const e=t.rows[0],a={id:e.id,customerId:e.customer_id,customerName:e.customer_name,companyName:e.company_name,email:e.email,phone:e.phone,serviceNeeded:e.service_needed,siteLocation:e.site_location,startDate:e.start_date,rentalDays:e.rental_days,shiftTiming:e.shift_timing,status:e.status,source:e.source,assignedTo:e.assigned_to||"",assignedToName:e.assigned_to_name||"",designation:e.designation,createdAt:e.created_at,updatedAt:e.updated_at,files:e.files?JSON.parse(e.files):null,notes:e.notes};return console.log(`Lead ${s} retrieved successfully`),a}catch(t){throw console.error(`Error fetching lead ${s}:`,t),t}},E=async s=>{try{if(!s)throw new Error("Invalid lead ID provided");console.log(`Deleting lead ${s} from database`);const e=(await c("DELETE FROM leads WHERE id = $1 RETURNING id",[s])).rows.length>0;return e?console.log(`Lead ${s} deleted successfully`):console.warn(`Lead ${s} not found for deletion`),e}catch(t){throw console.error(`Error deleting lead ${s}:`,t),t}},u=async(s,t)=>{try{console.log("üîç Finding or creating customer for lead:",{email:s.email,customerName:s.customerName,companyName:s.companyName});const e=await t.query("SELECT id, name, company_name, contact_name FROM customers WHERE email = $1",[s.email]);if(e.rows.length>0){const r=e.rows[0];return console.log(`‚úÖ Found existing customer ${r.id} (${r.name}) for email ${s.email}`),{customerId:r.id,customerName:r.name,companyName:r.company_name}}if(s.customerName&&s.companyName){const r=await t.query("SELECT id, name, company_name FROM customers WHERE name ILIKE $1 AND company_name ILIKE $2",[`%${s.customerName}%`,`%${s.companyName}%`]);if(r.rows.length>0){const m=r.rows[0];return console.log(`‚úÖ Found existing customer ${m.id} by name+company match`),await t.query("UPDATE customers SET email = $1, updated_at = NOW() WHERE id = $2 AND (email IS NULL OR email = '')",[s.email,m.id]),{customerId:m.id,customerName:m.name,companyName:m.company_name}}}console.log(`üÜï Creating new customer for email ${s.email}`);const a=s.customerName||"Unknown Customer",o=s.companyName||a,n=(await t.query(`
      INSERT INTO customers (
        name, company_name, contact_name, email, phone, address, 
        type, designation, notes
      )
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING id, name, company_name
    `,[a,o,a,s.email,s.phone||"",s.siteLocation||"","other",s.designation||"",`Auto-created from lead on ${new Date().toISOString()}`])).rows[0];return console.log(`üéâ Created new customer ${n.id} (${n.name}) for lead`),{customerId:n.id,customerName:n.name,companyName:n.company_name}}catch(e){return console.error("‚ùå Error finding/creating customer for lead:",e),console.log("üîÑ Falling back to lead data without customer linking"),{customerId:null,customerName:s.customerName||"Unknown Customer",companyName:s.companyName||""}}};export{p as createLead,E as deleteLead,u as findOrCreateCustomerForLead,N as getLeadById,_ as getLeads,y as updateLeadStatus};
